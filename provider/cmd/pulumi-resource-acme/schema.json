{
    "name": "acme",
    "description": "A Pulumi provider for managing and generating certificates generated by an ACME CA, such as Let's Encrypt.",
    "keywords": [
        "pulumi",
        "acme"
    ],
    "homepage": "https://github.com/rienafairefr/pulumi-acme",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`acme` Terraform Provider](https://github.com/terraform-providers/terraform-provider-acme).",
    "repository": "https://github.com/rienafairefr/pulumi-acme",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "serverUrl": {
                "type": "string",
                "$ref": "#/types/acme:server_url:ServerURL",
                "defaultInfo": {
                    "environment": [
                        "ACME_SERVER_URL"
                    ]
                }
            }
        },
        "defaults": [
            "serverUrl"
        ]
    },
    "types": {
        "acme:index/CertificateDnsChallenge:CertificateDnsChallenge": {
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provider": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "provider"
            ]
        },
        "acme:index/RegistrationExternalAccountBinding:RegistrationExternalAccountBinding": {
            "properties": {
                "hmacBase64": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hmacBase64",
                "keyId"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the acme package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "serverUrl": {
                "type": "string",
                "$ref": "#/types/acme:server_url:ServerURL",
                "defaultInfo": {
                    "environment": [
                        "ACME_SERVER_URL"
                    ]
                }
            }
        }
    },
    "resources": {
        "acme:index/certificate:Certificate": {
            "properties": {
                "accountKeyPem": {
                    "type": "string",
                    "description": "The private key of the account that is\nrequesting the certificate.\n"
                },
                "certificateDomain": {
                    "type": "string",
                    "description": "The common name of the certificate.\n"
                },
                "certificateP12": {
                    "type": "string",
                    "description": "The certificate, intermediate, and the private key\narchived as a PFX file (PKCS12 format, generally used by Microsoft products).\nThe data is base64 encoded (including padding), and its password is\nconfigurable via the `certificate_p12_password`\nargument. This field is empty if creating a certificate from a CSR.\n"
                },
                "certificateP12Password": {
                    "type": "string",
                    "description": "Password to be used when generating\nthe PFX file stored in `certificate_p12`. Defaults to an\nempty string.\n"
                },
                "certificatePem": {
                    "type": "string",
                    "description": "The certificate in PEM format. This does not include the\n`issuer_pem`. This certificate can be concatenated with `issuer_pem` to form\na full chain, e.g. `\"${acme_certificate.certificate.certificate_pem}${acme_certificate.certificate.issuer_pem}\"`\n"
                },
                "certificateRequestPem": {
                    "type": "string",
                    "description": "A pre-created certificate request, such as one\nfrom [`tls_cert_request`][tls-cert-request], or one from an external source,\nin PEM format.  Either this, or the in-resource request options (`common_name`,\n`key_type`, and optionally `subject_alternative_names`) need to be specified.\n"
                },
                "certificateUrl": {
                    "type": "string",
                    "description": "The full URL of the certificate within the ACME CA. Same\nas `id`.\n"
                },
                "commonName": {
                    "type": "string",
                    "description": "The certificate's common name, the primary domain that the\ncertificate will be recognized for. Required when not specifying a CSR.\n"
                },
                "disableCompletePropagation": {
                    "type": "boolean",
                    "description": "Disable the requiement for full\npropagation of the TXT challenge record before proceeding with validation.\nDefaults to `false`. Only recommended for testing..\n"
                },
                "dnsChallenges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/acme:index/CertificateDnsChallenge:CertificateDnsChallenge"
                    },
                    "description": "The DNS challenges to\nuse in fulfilling the request.\n"
                },
                "issuerPem": {
                    "type": "string",
                    "description": "The intermediate certificate of the issuer.\n"
                },
                "keyType": {
                    "type": "string",
                    "description": "The key type for the certificate's private key. Can be one of:\n`P256` and `P384` (for ECDSA keys of respective length) or `2048`, `4096`, and\n`8192` (for RSA keys of respective length). Required when not specifying a\nCSR. The default is `2048` (RSA key of 2048 bits).\n"
                },
                "minDaysRemaining": {
                    "type": "integer",
                    "description": "The minimum amount of days remaining on the\nexpiration of a certificate before a renewal is attempted. The default is\n`30`. A value of less than `0` means that the certificate will never be\nrenewed.\n"
                },
                "mustStaple": {
                    "type": "boolean",
                    "description": "Enables the [OCSP Stapling Required][ocsp-stapling]\nTLS Security Policy extension. Certificates with this extension must include a\nvalid OCSP Staple in the TLS handshake for the connection to succeed.\nDefaults to `false`. Note that this option has no effect when using an\nexternal CSR - it must be enabled in the CSR itself.\n"
                },
                "privateKeyPem": {
                    "type": "string",
                    "description": "The certificate's private key, in PEM format, if the\ncertificate was generated from scratch and not with\n`certificate_request_pem`.  If\n`certificate_request_pem` was used, this will be blank.\n"
                },
                "recursiveNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The recursive\nnameservers\nthat will be used to check for propagation of the challenge record. Defaults\nto your system-configured DNS resolvers.\n"
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The certificate's subject alternative names,\ndomains that this certificate will also be recognized for. Only valid when not\nspecifying a CSR.\n"
                }
            },
            "required": [
                "accountKeyPem",
                "certificateDomain",
                "certificateP12",
                "certificatePem",
                "certificateUrl",
                "dnsChallenges",
                "issuerPem",
                "privateKeyPem"
            ],
            "inputProperties": {
                "accountKeyPem": {
                    "type": "string",
                    "description": "The private key of the account that is\nrequesting the certificate.\n"
                },
                "certificateP12Password": {
                    "type": "string",
                    "description": "Password to be used when generating\nthe PFX file stored in `certificate_p12`. Defaults to an\nempty string.\n"
                },
                "certificateRequestPem": {
                    "type": "string",
                    "description": "A pre-created certificate request, such as one\nfrom [`tls_cert_request`][tls-cert-request], or one from an external source,\nin PEM format.  Either this, or the in-resource request options (`common_name`,\n`key_type`, and optionally `subject_alternative_names`) need to be specified.\n"
                },
                "commonName": {
                    "type": "string",
                    "description": "The certificate's common name, the primary domain that the\ncertificate will be recognized for. Required when not specifying a CSR.\n"
                },
                "disableCompletePropagation": {
                    "type": "boolean",
                    "description": "Disable the requiement for full\npropagation of the TXT challenge record before proceeding with validation.\nDefaults to `false`. Only recommended for testing..\n"
                },
                "dnsChallenges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/acme:index/CertificateDnsChallenge:CertificateDnsChallenge"
                    },
                    "description": "The DNS challenges to\nuse in fulfilling the request.\n"
                },
                "keyType": {
                    "type": "string",
                    "description": "The key type for the certificate's private key. Can be one of:\n`P256` and `P384` (for ECDSA keys of respective length) or `2048`, `4096`, and\n`8192` (for RSA keys of respective length). Required when not specifying a\nCSR. The default is `2048` (RSA key of 2048 bits).\n"
                },
                "minDaysRemaining": {
                    "type": "integer",
                    "description": "The minimum amount of days remaining on the\nexpiration of a certificate before a renewal is attempted. The default is\n`30`. A value of less than `0` means that the certificate will never be\nrenewed.\n"
                },
                "mustStaple": {
                    "type": "boolean",
                    "description": "Enables the [OCSP Stapling Required][ocsp-stapling]\nTLS Security Policy extension. Certificates with this extension must include a\nvalid OCSP Staple in the TLS handshake for the connection to succeed.\nDefaults to `false`. Note that this option has no effect when using an\nexternal CSR - it must be enabled in the CSR itself.\n"
                },
                "recursiveNameservers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The recursive\nnameservers\nthat will be used to check for propagation of the challenge record. Defaults\nto your system-configured DNS resolvers.\n"
                },
                "subjectAlternativeNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The certificate's subject alternative names,\ndomains that this certificate will also be recognized for. Only valid when not\nspecifying a CSR.\n"
                }
            },
            "requiredInputs": [
                "accountKeyPem",
                "dnsChallenges"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Certificate resources.\n",
                "properties": {
                    "accountKeyPem": {
                        "type": "string",
                        "description": "The private key of the account that is\nrequesting the certificate.\n"
                    },
                    "certificateDomain": {
                        "type": "string",
                        "description": "The common name of the certificate.\n"
                    },
                    "certificateP12": {
                        "type": "string",
                        "description": "The certificate, intermediate, and the private key\narchived as a PFX file (PKCS12 format, generally used by Microsoft products).\nThe data is base64 encoded (including padding), and its password is\nconfigurable via the `certificate_p12_password`\nargument. This field is empty if creating a certificate from a CSR.\n"
                    },
                    "certificateP12Password": {
                        "type": "string",
                        "description": "Password to be used when generating\nthe PFX file stored in `certificate_p12`. Defaults to an\nempty string.\n"
                    },
                    "certificatePem": {
                        "type": "string",
                        "description": "The certificate in PEM format. This does not include the\n`issuer_pem`. This certificate can be concatenated with `issuer_pem` to form\na full chain, e.g. `\"${acme_certificate.certificate.certificate_pem}${acme_certificate.certificate.issuer_pem}\"`\n"
                    },
                    "certificateRequestPem": {
                        "type": "string",
                        "description": "A pre-created certificate request, such as one\nfrom [`tls_cert_request`][tls-cert-request], or one from an external source,\nin PEM format.  Either this, or the in-resource request options (`common_name`,\n`key_type`, and optionally `subject_alternative_names`) need to be specified.\n"
                    },
                    "certificateUrl": {
                        "type": "string",
                        "description": "The full URL of the certificate within the ACME CA. Same\nas `id`.\n"
                    },
                    "commonName": {
                        "type": "string",
                        "description": "The certificate's common name, the primary domain that the\ncertificate will be recognized for. Required when not specifying a CSR.\n"
                    },
                    "disableCompletePropagation": {
                        "type": "boolean",
                        "description": "Disable the requiement for full\npropagation of the TXT challenge record before proceeding with validation.\nDefaults to `false`. Only recommended for testing..\n"
                    },
                    "dnsChallenges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/acme:index/CertificateDnsChallenge:CertificateDnsChallenge"
                        },
                        "description": "The DNS challenges to\nuse in fulfilling the request.\n"
                    },
                    "issuerPem": {
                        "type": "string",
                        "description": "The intermediate certificate of the issuer.\n"
                    },
                    "keyType": {
                        "type": "string",
                        "description": "The key type for the certificate's private key. Can be one of:\n`P256` and `P384` (for ECDSA keys of respective length) or `2048`, `4096`, and\n`8192` (for RSA keys of respective length). Required when not specifying a\nCSR. The default is `2048` (RSA key of 2048 bits).\n"
                    },
                    "minDaysRemaining": {
                        "type": "integer",
                        "description": "The minimum amount of days remaining on the\nexpiration of a certificate before a renewal is attempted. The default is\n`30`. A value of less than `0` means that the certificate will never be\nrenewed.\n"
                    },
                    "mustStaple": {
                        "type": "boolean",
                        "description": "Enables the [OCSP Stapling Required][ocsp-stapling]\nTLS Security Policy extension. Certificates with this extension must include a\nvalid OCSP Staple in the TLS handshake for the connection to succeed.\nDefaults to `false`. Note that this option has no effect when using an\nexternal CSR - it must be enabled in the CSR itself.\n"
                    },
                    "privateKeyPem": {
                        "type": "string",
                        "description": "The certificate's private key, in PEM format, if the\ncertificate was generated from scratch and not with\n`certificate_request_pem`.  If\n`certificate_request_pem` was used, this will be blank.\n"
                    },
                    "recursiveNameservers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The recursive\nnameservers\nthat will be used to check for propagation of the challenge record. Defaults\nto your system-configured DNS resolvers.\n"
                    },
                    "subjectAlternativeNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The certificate's subject alternative names,\ndomains that this certificate will also be recognized for. Only valid when not\nspecifying a CSR.\n"
                    }
                },
                "type": "object"
            }
        },
        "acme:index/registration:Registration": {
            "properties": {
                "accountKeyPem": {
                    "type": "string"
                },
                "emailAddress": {
                    "type": "string"
                },
                "externalAccountBinding": {
                    "$ref": "#/types/acme:index/RegistrationExternalAccountBinding:RegistrationExternalAccountBinding"
                },
                "registrationUrl": {
                    "type": "string"
                }
            },
            "required": [
                "accountKeyPem",
                "emailAddress",
                "registrationUrl"
            ],
            "inputProperties": {
                "accountKeyPem": {
                    "type": "string"
                },
                "emailAddress": {
                    "type": "string"
                },
                "externalAccountBinding": {
                    "$ref": "#/types/acme:index/RegistrationExternalAccountBinding:RegistrationExternalAccountBinding"
                }
            },
            "requiredInputs": [
                "accountKeyPem",
                "emailAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Registration resources.\n",
                "properties": {
                    "accountKeyPem": {
                        "type": "string"
                    },
                    "emailAddress": {
                        "type": "string"
                    },
                    "externalAccountBinding": {
                        "$ref": "#/types/acme:index/RegistrationExternalAccountBinding:RegistrationExternalAccountBinding"
                    },
                    "registrationUrl": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi provider for managing and generating certificates generated by an ACME CA, such as Let's Encrypt.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-acme)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-acme` repo](https://github.com/pulumi/pulumi-acme/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-acme` repo](https://github.com/terraform-providers/terraform-provider-acme/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-acme)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-acme` repo](https://github.com/pulumi/pulumi-acme/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-acme` repo](https://github.com/terraform-providers/terraform-provider-acme/issues).",
            "requires": {
                "pulumi": "\u003e=2.9.0,\u003c3.0.0"
            }
        }
    }
}
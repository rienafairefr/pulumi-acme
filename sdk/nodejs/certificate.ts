// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'acme:index/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    public readonly accountKeyPem!: pulumi.Output<string>;
    public /*out*/ readonly certificateDomain!: pulumi.Output<string>;
    public /*out*/ readonly certificateP12!: pulumi.Output<string>;
    public readonly certificateP12Password!: pulumi.Output<string | undefined>;
    public /*out*/ readonly certificatePem!: pulumi.Output<string>;
    public readonly certificateRequestPem!: pulumi.Output<string | undefined>;
    public /*out*/ readonly certificateUrl!: pulumi.Output<string>;
    public readonly commonName!: pulumi.Output<string | undefined>;
    public readonly disableCompletePropagation!: pulumi.Output<boolean | undefined>;
    public readonly dnsChallenges!: pulumi.Output<outputs.CertificateDnsChallenge[] | undefined>;
    public readonly httpChallenge!: pulumi.Output<outputs.CertificateHttpChallenge | undefined>;
    public readonly httpMemcachedChallenge!: pulumi.Output<outputs.CertificateHttpMemcachedChallenge | undefined>;
    public readonly httpWebrootChallenge!: pulumi.Output<outputs.CertificateHttpWebrootChallenge | undefined>;
    public /*out*/ readonly issuerPem!: pulumi.Output<string>;
    public readonly keyType!: pulumi.Output<string | undefined>;
    public readonly minDaysRemaining!: pulumi.Output<number | undefined>;
    public readonly mustStaple!: pulumi.Output<boolean | undefined>;
    public readonly preCheckDelay!: pulumi.Output<number | undefined>;
    public readonly preferredChain!: pulumi.Output<string | undefined>;
    public /*out*/ readonly privateKeyPem!: pulumi.Output<string>;
    public readonly recursiveNameservers!: pulumi.Output<string[] | undefined>;
    public readonly subjectAlternativeNames!: pulumi.Output<string[] | undefined>;
    public readonly tlsChallenge!: pulumi.Output<outputs.CertificateTlsChallenge | undefined>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            inputs["accountKeyPem"] = state ? state.accountKeyPem : undefined;
            inputs["certificateDomain"] = state ? state.certificateDomain : undefined;
            inputs["certificateP12"] = state ? state.certificateP12 : undefined;
            inputs["certificateP12Password"] = state ? state.certificateP12Password : undefined;
            inputs["certificatePem"] = state ? state.certificatePem : undefined;
            inputs["certificateRequestPem"] = state ? state.certificateRequestPem : undefined;
            inputs["certificateUrl"] = state ? state.certificateUrl : undefined;
            inputs["commonName"] = state ? state.commonName : undefined;
            inputs["disableCompletePropagation"] = state ? state.disableCompletePropagation : undefined;
            inputs["dnsChallenges"] = state ? state.dnsChallenges : undefined;
            inputs["httpChallenge"] = state ? state.httpChallenge : undefined;
            inputs["httpMemcachedChallenge"] = state ? state.httpMemcachedChallenge : undefined;
            inputs["httpWebrootChallenge"] = state ? state.httpWebrootChallenge : undefined;
            inputs["issuerPem"] = state ? state.issuerPem : undefined;
            inputs["keyType"] = state ? state.keyType : undefined;
            inputs["minDaysRemaining"] = state ? state.minDaysRemaining : undefined;
            inputs["mustStaple"] = state ? state.mustStaple : undefined;
            inputs["preCheckDelay"] = state ? state.preCheckDelay : undefined;
            inputs["preferredChain"] = state ? state.preferredChain : undefined;
            inputs["privateKeyPem"] = state ? state.privateKeyPem : undefined;
            inputs["recursiveNameservers"] = state ? state.recursiveNameservers : undefined;
            inputs["subjectAlternativeNames"] = state ? state.subjectAlternativeNames : undefined;
            inputs["tlsChallenge"] = state ? state.tlsChallenge : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if ((!args || args.accountKeyPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountKeyPem'");
            }
            inputs["accountKeyPem"] = args ? args.accountKeyPem : undefined;
            inputs["certificateP12Password"] = args ? args.certificateP12Password : undefined;
            inputs["certificateRequestPem"] = args ? args.certificateRequestPem : undefined;
            inputs["commonName"] = args ? args.commonName : undefined;
            inputs["disableCompletePropagation"] = args ? args.disableCompletePropagation : undefined;
            inputs["dnsChallenges"] = args ? args.dnsChallenges : undefined;
            inputs["httpChallenge"] = args ? args.httpChallenge : undefined;
            inputs["httpMemcachedChallenge"] = args ? args.httpMemcachedChallenge : undefined;
            inputs["httpWebrootChallenge"] = args ? args.httpWebrootChallenge : undefined;
            inputs["keyType"] = args ? args.keyType : undefined;
            inputs["minDaysRemaining"] = args ? args.minDaysRemaining : undefined;
            inputs["mustStaple"] = args ? args.mustStaple : undefined;
            inputs["preCheckDelay"] = args ? args.preCheckDelay : undefined;
            inputs["preferredChain"] = args ? args.preferredChain : undefined;
            inputs["recursiveNameservers"] = args ? args.recursiveNameservers : undefined;
            inputs["subjectAlternativeNames"] = args ? args.subjectAlternativeNames : undefined;
            inputs["tlsChallenge"] = args ? args.tlsChallenge : undefined;
            inputs["certificateDomain"] = undefined /*out*/;
            inputs["certificateP12"] = undefined /*out*/;
            inputs["certificatePem"] = undefined /*out*/;
            inputs["certificateUrl"] = undefined /*out*/;
            inputs["issuerPem"] = undefined /*out*/;
            inputs["privateKeyPem"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Certificate.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    readonly accountKeyPem?: pulumi.Input<string>;
    readonly certificateDomain?: pulumi.Input<string>;
    readonly certificateP12?: pulumi.Input<string>;
    readonly certificateP12Password?: pulumi.Input<string>;
    readonly certificatePem?: pulumi.Input<string>;
    readonly certificateRequestPem?: pulumi.Input<string>;
    readonly certificateUrl?: pulumi.Input<string>;
    readonly commonName?: pulumi.Input<string>;
    readonly disableCompletePropagation?: pulumi.Input<boolean>;
    readonly dnsChallenges?: pulumi.Input<pulumi.Input<inputs.CertificateDnsChallenge>[]>;
    readonly httpChallenge?: pulumi.Input<inputs.CertificateHttpChallenge>;
    readonly httpMemcachedChallenge?: pulumi.Input<inputs.CertificateHttpMemcachedChallenge>;
    readonly httpWebrootChallenge?: pulumi.Input<inputs.CertificateHttpWebrootChallenge>;
    readonly issuerPem?: pulumi.Input<string>;
    readonly keyType?: pulumi.Input<string>;
    readonly minDaysRemaining?: pulumi.Input<number>;
    readonly mustStaple?: pulumi.Input<boolean>;
    readonly preCheckDelay?: pulumi.Input<number>;
    readonly preferredChain?: pulumi.Input<string>;
    readonly privateKeyPem?: pulumi.Input<string>;
    readonly recursiveNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tlsChallenge?: pulumi.Input<inputs.CertificateTlsChallenge>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    readonly accountKeyPem: pulumi.Input<string>;
    readonly certificateP12Password?: pulumi.Input<string>;
    readonly certificateRequestPem?: pulumi.Input<string>;
    readonly commonName?: pulumi.Input<string>;
    readonly disableCompletePropagation?: pulumi.Input<boolean>;
    readonly dnsChallenges?: pulumi.Input<pulumi.Input<inputs.CertificateDnsChallenge>[]>;
    readonly httpChallenge?: pulumi.Input<inputs.CertificateHttpChallenge>;
    readonly httpMemcachedChallenge?: pulumi.Input<inputs.CertificateHttpMemcachedChallenge>;
    readonly httpWebrootChallenge?: pulumi.Input<inputs.CertificateHttpWebrootChallenge>;
    readonly keyType?: pulumi.Input<string>;
    readonly minDaysRemaining?: pulumi.Input<number>;
    readonly mustStaple?: pulumi.Input<boolean>;
    readonly preCheckDelay?: pulumi.Input<number>;
    readonly preferredChain?: pulumi.Input<string>;
    readonly recursiveNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    readonly subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    readonly tlsChallenge?: pulumi.Input<inputs.CertificateTlsChallenge>;
}

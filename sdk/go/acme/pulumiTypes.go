// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package acme

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type CertificateDnsChallenge struct {
	Config   map[string]interface{} `pulumi:"config"`
	Provider string                 `pulumi:"provider"`
}

// CertificateDnsChallengeInput is an input type that accepts CertificateDnsChallengeArgs and CertificateDnsChallengeOutput values.
// You can construct a concrete instance of `CertificateDnsChallengeInput` via:
//
//          CertificateDnsChallengeArgs{...}
type CertificateDnsChallengeInput interface {
	pulumi.Input

	ToCertificateDnsChallengeOutput() CertificateDnsChallengeOutput
	ToCertificateDnsChallengeOutputWithContext(context.Context) CertificateDnsChallengeOutput
}

type CertificateDnsChallengeArgs struct {
	Config   pulumi.MapInput    `pulumi:"config"`
	Provider pulumi.StringInput `pulumi:"provider"`
}

func (CertificateDnsChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDnsChallenge)(nil)).Elem()
}

func (i CertificateDnsChallengeArgs) ToCertificateDnsChallengeOutput() CertificateDnsChallengeOutput {
	return i.ToCertificateDnsChallengeOutputWithContext(context.Background())
}

func (i CertificateDnsChallengeArgs) ToCertificateDnsChallengeOutputWithContext(ctx context.Context) CertificateDnsChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDnsChallengeOutput)
}

// CertificateDnsChallengeArrayInput is an input type that accepts CertificateDnsChallengeArray and CertificateDnsChallengeArrayOutput values.
// You can construct a concrete instance of `CertificateDnsChallengeArrayInput` via:
//
//          CertificateDnsChallengeArray{ CertificateDnsChallengeArgs{...} }
type CertificateDnsChallengeArrayInput interface {
	pulumi.Input

	ToCertificateDnsChallengeArrayOutput() CertificateDnsChallengeArrayOutput
	ToCertificateDnsChallengeArrayOutputWithContext(context.Context) CertificateDnsChallengeArrayOutput
}

type CertificateDnsChallengeArray []CertificateDnsChallengeInput

func (CertificateDnsChallengeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateDnsChallenge)(nil)).Elem()
}

func (i CertificateDnsChallengeArray) ToCertificateDnsChallengeArrayOutput() CertificateDnsChallengeArrayOutput {
	return i.ToCertificateDnsChallengeArrayOutputWithContext(context.Background())
}

func (i CertificateDnsChallengeArray) ToCertificateDnsChallengeArrayOutputWithContext(ctx context.Context) CertificateDnsChallengeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDnsChallengeArrayOutput)
}

type CertificateDnsChallengeOutput struct{ *pulumi.OutputState }

func (CertificateDnsChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDnsChallenge)(nil)).Elem()
}

func (o CertificateDnsChallengeOutput) ToCertificateDnsChallengeOutput() CertificateDnsChallengeOutput {
	return o
}

func (o CertificateDnsChallengeOutput) ToCertificateDnsChallengeOutputWithContext(ctx context.Context) CertificateDnsChallengeOutput {
	return o
}

func (o CertificateDnsChallengeOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v CertificateDnsChallenge) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

func (o CertificateDnsChallengeOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDnsChallenge) string { return v.Provider }).(pulumi.StringOutput)
}

type CertificateDnsChallengeArrayOutput struct{ *pulumi.OutputState }

func (CertificateDnsChallengeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateDnsChallenge)(nil)).Elem()
}

func (o CertificateDnsChallengeArrayOutput) ToCertificateDnsChallengeArrayOutput() CertificateDnsChallengeArrayOutput {
	return o
}

func (o CertificateDnsChallengeArrayOutput) ToCertificateDnsChallengeArrayOutputWithContext(ctx context.Context) CertificateDnsChallengeArrayOutput {
	return o
}

func (o CertificateDnsChallengeArrayOutput) Index(i pulumi.IntInput) CertificateDnsChallengeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateDnsChallenge {
		return vs[0].([]CertificateDnsChallenge)[vs[1].(int)]
	}).(CertificateDnsChallengeOutput)
}

type CertificateHttpChallenge struct {
	Port        *int    `pulumi:"port"`
	ProxyHeader *string `pulumi:"proxyHeader"`
}

// CertificateHttpChallengeInput is an input type that accepts CertificateHttpChallengeArgs and CertificateHttpChallengeOutput values.
// You can construct a concrete instance of `CertificateHttpChallengeInput` via:
//
//          CertificateHttpChallengeArgs{...}
type CertificateHttpChallengeInput interface {
	pulumi.Input

	ToCertificateHttpChallengeOutput() CertificateHttpChallengeOutput
	ToCertificateHttpChallengeOutputWithContext(context.Context) CertificateHttpChallengeOutput
}

type CertificateHttpChallengeArgs struct {
	Port        pulumi.IntPtrInput    `pulumi:"port"`
	ProxyHeader pulumi.StringPtrInput `pulumi:"proxyHeader"`
}

func (CertificateHttpChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateHttpChallenge)(nil)).Elem()
}

func (i CertificateHttpChallengeArgs) ToCertificateHttpChallengeOutput() CertificateHttpChallengeOutput {
	return i.ToCertificateHttpChallengeOutputWithContext(context.Background())
}

func (i CertificateHttpChallengeArgs) ToCertificateHttpChallengeOutputWithContext(ctx context.Context) CertificateHttpChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateHttpChallengeOutput)
}

func (i CertificateHttpChallengeArgs) ToCertificateHttpChallengePtrOutput() CertificateHttpChallengePtrOutput {
	return i.ToCertificateHttpChallengePtrOutputWithContext(context.Background())
}

func (i CertificateHttpChallengeArgs) ToCertificateHttpChallengePtrOutputWithContext(ctx context.Context) CertificateHttpChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateHttpChallengeOutput).ToCertificateHttpChallengePtrOutputWithContext(ctx)
}

// CertificateHttpChallengePtrInput is an input type that accepts CertificateHttpChallengeArgs, CertificateHttpChallengePtr and CertificateHttpChallengePtrOutput values.
// You can construct a concrete instance of `CertificateHttpChallengePtrInput` via:
//
//          CertificateHttpChallengeArgs{...}
//
//  or:
//
//          nil
type CertificateHttpChallengePtrInput interface {
	pulumi.Input

	ToCertificateHttpChallengePtrOutput() CertificateHttpChallengePtrOutput
	ToCertificateHttpChallengePtrOutputWithContext(context.Context) CertificateHttpChallengePtrOutput
}

type certificateHttpChallengePtrType CertificateHttpChallengeArgs

func CertificateHttpChallengePtr(v *CertificateHttpChallengeArgs) CertificateHttpChallengePtrInput {
	return (*certificateHttpChallengePtrType)(v)
}

func (*certificateHttpChallengePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateHttpChallenge)(nil)).Elem()
}

func (i *certificateHttpChallengePtrType) ToCertificateHttpChallengePtrOutput() CertificateHttpChallengePtrOutput {
	return i.ToCertificateHttpChallengePtrOutputWithContext(context.Background())
}

func (i *certificateHttpChallengePtrType) ToCertificateHttpChallengePtrOutputWithContext(ctx context.Context) CertificateHttpChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateHttpChallengePtrOutput)
}

type CertificateHttpChallengeOutput struct{ *pulumi.OutputState }

func (CertificateHttpChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateHttpChallenge)(nil)).Elem()
}

func (o CertificateHttpChallengeOutput) ToCertificateHttpChallengeOutput() CertificateHttpChallengeOutput {
	return o
}

func (o CertificateHttpChallengeOutput) ToCertificateHttpChallengeOutputWithContext(ctx context.Context) CertificateHttpChallengeOutput {
	return o
}

func (o CertificateHttpChallengeOutput) ToCertificateHttpChallengePtrOutput() CertificateHttpChallengePtrOutput {
	return o.ToCertificateHttpChallengePtrOutputWithContext(context.Background())
}

func (o CertificateHttpChallengeOutput) ToCertificateHttpChallengePtrOutputWithContext(ctx context.Context) CertificateHttpChallengePtrOutput {
	return o.ApplyT(func(v CertificateHttpChallenge) *CertificateHttpChallenge {
		return &v
	}).(CertificateHttpChallengePtrOutput)
}
func (o CertificateHttpChallengeOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertificateHttpChallenge) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o CertificateHttpChallengeOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateHttpChallenge) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

type CertificateHttpChallengePtrOutput struct{ *pulumi.OutputState }

func (CertificateHttpChallengePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateHttpChallenge)(nil)).Elem()
}

func (o CertificateHttpChallengePtrOutput) ToCertificateHttpChallengePtrOutput() CertificateHttpChallengePtrOutput {
	return o
}

func (o CertificateHttpChallengePtrOutput) ToCertificateHttpChallengePtrOutputWithContext(ctx context.Context) CertificateHttpChallengePtrOutput {
	return o
}

func (o CertificateHttpChallengePtrOutput) Elem() CertificateHttpChallengeOutput {
	return o.ApplyT(func(v *CertificateHttpChallenge) CertificateHttpChallenge { return *v }).(CertificateHttpChallengeOutput)
}

func (o CertificateHttpChallengePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertificateHttpChallenge) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func (o CertificateHttpChallengePtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateHttpChallenge) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

type CertificateHttpMemcachedChallenge struct {
	Hosts []string `pulumi:"hosts"`
}

// CertificateHttpMemcachedChallengeInput is an input type that accepts CertificateHttpMemcachedChallengeArgs and CertificateHttpMemcachedChallengeOutput values.
// You can construct a concrete instance of `CertificateHttpMemcachedChallengeInput` via:
//
//          CertificateHttpMemcachedChallengeArgs{...}
type CertificateHttpMemcachedChallengeInput interface {
	pulumi.Input

	ToCertificateHttpMemcachedChallengeOutput() CertificateHttpMemcachedChallengeOutput
	ToCertificateHttpMemcachedChallengeOutputWithContext(context.Context) CertificateHttpMemcachedChallengeOutput
}

type CertificateHttpMemcachedChallengeArgs struct {
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
}

func (CertificateHttpMemcachedChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateHttpMemcachedChallenge)(nil)).Elem()
}

func (i CertificateHttpMemcachedChallengeArgs) ToCertificateHttpMemcachedChallengeOutput() CertificateHttpMemcachedChallengeOutput {
	return i.ToCertificateHttpMemcachedChallengeOutputWithContext(context.Background())
}

func (i CertificateHttpMemcachedChallengeArgs) ToCertificateHttpMemcachedChallengeOutputWithContext(ctx context.Context) CertificateHttpMemcachedChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateHttpMemcachedChallengeOutput)
}

func (i CertificateHttpMemcachedChallengeArgs) ToCertificateHttpMemcachedChallengePtrOutput() CertificateHttpMemcachedChallengePtrOutput {
	return i.ToCertificateHttpMemcachedChallengePtrOutputWithContext(context.Background())
}

func (i CertificateHttpMemcachedChallengeArgs) ToCertificateHttpMemcachedChallengePtrOutputWithContext(ctx context.Context) CertificateHttpMemcachedChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateHttpMemcachedChallengeOutput).ToCertificateHttpMemcachedChallengePtrOutputWithContext(ctx)
}

// CertificateHttpMemcachedChallengePtrInput is an input type that accepts CertificateHttpMemcachedChallengeArgs, CertificateHttpMemcachedChallengePtr and CertificateHttpMemcachedChallengePtrOutput values.
// You can construct a concrete instance of `CertificateHttpMemcachedChallengePtrInput` via:
//
//          CertificateHttpMemcachedChallengeArgs{...}
//
//  or:
//
//          nil
type CertificateHttpMemcachedChallengePtrInput interface {
	pulumi.Input

	ToCertificateHttpMemcachedChallengePtrOutput() CertificateHttpMemcachedChallengePtrOutput
	ToCertificateHttpMemcachedChallengePtrOutputWithContext(context.Context) CertificateHttpMemcachedChallengePtrOutput
}

type certificateHttpMemcachedChallengePtrType CertificateHttpMemcachedChallengeArgs

func CertificateHttpMemcachedChallengePtr(v *CertificateHttpMemcachedChallengeArgs) CertificateHttpMemcachedChallengePtrInput {
	return (*certificateHttpMemcachedChallengePtrType)(v)
}

func (*certificateHttpMemcachedChallengePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateHttpMemcachedChallenge)(nil)).Elem()
}

func (i *certificateHttpMemcachedChallengePtrType) ToCertificateHttpMemcachedChallengePtrOutput() CertificateHttpMemcachedChallengePtrOutput {
	return i.ToCertificateHttpMemcachedChallengePtrOutputWithContext(context.Background())
}

func (i *certificateHttpMemcachedChallengePtrType) ToCertificateHttpMemcachedChallengePtrOutputWithContext(ctx context.Context) CertificateHttpMemcachedChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateHttpMemcachedChallengePtrOutput)
}

type CertificateHttpMemcachedChallengeOutput struct{ *pulumi.OutputState }

func (CertificateHttpMemcachedChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateHttpMemcachedChallenge)(nil)).Elem()
}

func (o CertificateHttpMemcachedChallengeOutput) ToCertificateHttpMemcachedChallengeOutput() CertificateHttpMemcachedChallengeOutput {
	return o
}

func (o CertificateHttpMemcachedChallengeOutput) ToCertificateHttpMemcachedChallengeOutputWithContext(ctx context.Context) CertificateHttpMemcachedChallengeOutput {
	return o
}

func (o CertificateHttpMemcachedChallengeOutput) ToCertificateHttpMemcachedChallengePtrOutput() CertificateHttpMemcachedChallengePtrOutput {
	return o.ToCertificateHttpMemcachedChallengePtrOutputWithContext(context.Background())
}

func (o CertificateHttpMemcachedChallengeOutput) ToCertificateHttpMemcachedChallengePtrOutputWithContext(ctx context.Context) CertificateHttpMemcachedChallengePtrOutput {
	return o.ApplyT(func(v CertificateHttpMemcachedChallenge) *CertificateHttpMemcachedChallenge {
		return &v
	}).(CertificateHttpMemcachedChallengePtrOutput)
}
func (o CertificateHttpMemcachedChallengeOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateHttpMemcachedChallenge) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

type CertificateHttpMemcachedChallengePtrOutput struct{ *pulumi.OutputState }

func (CertificateHttpMemcachedChallengePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateHttpMemcachedChallenge)(nil)).Elem()
}

func (o CertificateHttpMemcachedChallengePtrOutput) ToCertificateHttpMemcachedChallengePtrOutput() CertificateHttpMemcachedChallengePtrOutput {
	return o
}

func (o CertificateHttpMemcachedChallengePtrOutput) ToCertificateHttpMemcachedChallengePtrOutputWithContext(ctx context.Context) CertificateHttpMemcachedChallengePtrOutput {
	return o
}

func (o CertificateHttpMemcachedChallengePtrOutput) Elem() CertificateHttpMemcachedChallengeOutput {
	return o.ApplyT(func(v *CertificateHttpMemcachedChallenge) CertificateHttpMemcachedChallenge { return *v }).(CertificateHttpMemcachedChallengeOutput)
}

func (o CertificateHttpMemcachedChallengePtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateHttpMemcachedChallenge) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

type CertificateHttpWebrootChallenge struct {
	Directory string `pulumi:"directory"`
}

// CertificateHttpWebrootChallengeInput is an input type that accepts CertificateHttpWebrootChallengeArgs and CertificateHttpWebrootChallengeOutput values.
// You can construct a concrete instance of `CertificateHttpWebrootChallengeInput` via:
//
//          CertificateHttpWebrootChallengeArgs{...}
type CertificateHttpWebrootChallengeInput interface {
	pulumi.Input

	ToCertificateHttpWebrootChallengeOutput() CertificateHttpWebrootChallengeOutput
	ToCertificateHttpWebrootChallengeOutputWithContext(context.Context) CertificateHttpWebrootChallengeOutput
}

type CertificateHttpWebrootChallengeArgs struct {
	Directory pulumi.StringInput `pulumi:"directory"`
}

func (CertificateHttpWebrootChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateHttpWebrootChallenge)(nil)).Elem()
}

func (i CertificateHttpWebrootChallengeArgs) ToCertificateHttpWebrootChallengeOutput() CertificateHttpWebrootChallengeOutput {
	return i.ToCertificateHttpWebrootChallengeOutputWithContext(context.Background())
}

func (i CertificateHttpWebrootChallengeArgs) ToCertificateHttpWebrootChallengeOutputWithContext(ctx context.Context) CertificateHttpWebrootChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateHttpWebrootChallengeOutput)
}

func (i CertificateHttpWebrootChallengeArgs) ToCertificateHttpWebrootChallengePtrOutput() CertificateHttpWebrootChallengePtrOutput {
	return i.ToCertificateHttpWebrootChallengePtrOutputWithContext(context.Background())
}

func (i CertificateHttpWebrootChallengeArgs) ToCertificateHttpWebrootChallengePtrOutputWithContext(ctx context.Context) CertificateHttpWebrootChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateHttpWebrootChallengeOutput).ToCertificateHttpWebrootChallengePtrOutputWithContext(ctx)
}

// CertificateHttpWebrootChallengePtrInput is an input type that accepts CertificateHttpWebrootChallengeArgs, CertificateHttpWebrootChallengePtr and CertificateHttpWebrootChallengePtrOutput values.
// You can construct a concrete instance of `CertificateHttpWebrootChallengePtrInput` via:
//
//          CertificateHttpWebrootChallengeArgs{...}
//
//  or:
//
//          nil
type CertificateHttpWebrootChallengePtrInput interface {
	pulumi.Input

	ToCertificateHttpWebrootChallengePtrOutput() CertificateHttpWebrootChallengePtrOutput
	ToCertificateHttpWebrootChallengePtrOutputWithContext(context.Context) CertificateHttpWebrootChallengePtrOutput
}

type certificateHttpWebrootChallengePtrType CertificateHttpWebrootChallengeArgs

func CertificateHttpWebrootChallengePtr(v *CertificateHttpWebrootChallengeArgs) CertificateHttpWebrootChallengePtrInput {
	return (*certificateHttpWebrootChallengePtrType)(v)
}

func (*certificateHttpWebrootChallengePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateHttpWebrootChallenge)(nil)).Elem()
}

func (i *certificateHttpWebrootChallengePtrType) ToCertificateHttpWebrootChallengePtrOutput() CertificateHttpWebrootChallengePtrOutput {
	return i.ToCertificateHttpWebrootChallengePtrOutputWithContext(context.Background())
}

func (i *certificateHttpWebrootChallengePtrType) ToCertificateHttpWebrootChallengePtrOutputWithContext(ctx context.Context) CertificateHttpWebrootChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateHttpWebrootChallengePtrOutput)
}

type CertificateHttpWebrootChallengeOutput struct{ *pulumi.OutputState }

func (CertificateHttpWebrootChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateHttpWebrootChallenge)(nil)).Elem()
}

func (o CertificateHttpWebrootChallengeOutput) ToCertificateHttpWebrootChallengeOutput() CertificateHttpWebrootChallengeOutput {
	return o
}

func (o CertificateHttpWebrootChallengeOutput) ToCertificateHttpWebrootChallengeOutputWithContext(ctx context.Context) CertificateHttpWebrootChallengeOutput {
	return o
}

func (o CertificateHttpWebrootChallengeOutput) ToCertificateHttpWebrootChallengePtrOutput() CertificateHttpWebrootChallengePtrOutput {
	return o.ToCertificateHttpWebrootChallengePtrOutputWithContext(context.Background())
}

func (o CertificateHttpWebrootChallengeOutput) ToCertificateHttpWebrootChallengePtrOutputWithContext(ctx context.Context) CertificateHttpWebrootChallengePtrOutput {
	return o.ApplyT(func(v CertificateHttpWebrootChallenge) *CertificateHttpWebrootChallenge {
		return &v
	}).(CertificateHttpWebrootChallengePtrOutput)
}
func (o CertificateHttpWebrootChallengeOutput) Directory() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateHttpWebrootChallenge) string { return v.Directory }).(pulumi.StringOutput)
}

type CertificateHttpWebrootChallengePtrOutput struct{ *pulumi.OutputState }

func (CertificateHttpWebrootChallengePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateHttpWebrootChallenge)(nil)).Elem()
}

func (o CertificateHttpWebrootChallengePtrOutput) ToCertificateHttpWebrootChallengePtrOutput() CertificateHttpWebrootChallengePtrOutput {
	return o
}

func (o CertificateHttpWebrootChallengePtrOutput) ToCertificateHttpWebrootChallengePtrOutputWithContext(ctx context.Context) CertificateHttpWebrootChallengePtrOutput {
	return o
}

func (o CertificateHttpWebrootChallengePtrOutput) Elem() CertificateHttpWebrootChallengeOutput {
	return o.ApplyT(func(v *CertificateHttpWebrootChallenge) CertificateHttpWebrootChallenge { return *v }).(CertificateHttpWebrootChallengeOutput)
}

func (o CertificateHttpWebrootChallengePtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateHttpWebrootChallenge) *string {
		if v == nil {
			return nil
		}
		return &v.Directory
	}).(pulumi.StringPtrOutput)
}

type CertificateTlsChallenge struct {
	Port *int `pulumi:"port"`
}

// CertificateTlsChallengeInput is an input type that accepts CertificateTlsChallengeArgs and CertificateTlsChallengeOutput values.
// You can construct a concrete instance of `CertificateTlsChallengeInput` via:
//
//          CertificateTlsChallengeArgs{...}
type CertificateTlsChallengeInput interface {
	pulumi.Input

	ToCertificateTlsChallengeOutput() CertificateTlsChallengeOutput
	ToCertificateTlsChallengeOutputWithContext(context.Context) CertificateTlsChallengeOutput
}

type CertificateTlsChallengeArgs struct {
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (CertificateTlsChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateTlsChallenge)(nil)).Elem()
}

func (i CertificateTlsChallengeArgs) ToCertificateTlsChallengeOutput() CertificateTlsChallengeOutput {
	return i.ToCertificateTlsChallengeOutputWithContext(context.Background())
}

func (i CertificateTlsChallengeArgs) ToCertificateTlsChallengeOutputWithContext(ctx context.Context) CertificateTlsChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTlsChallengeOutput)
}

func (i CertificateTlsChallengeArgs) ToCertificateTlsChallengePtrOutput() CertificateTlsChallengePtrOutput {
	return i.ToCertificateTlsChallengePtrOutputWithContext(context.Background())
}

func (i CertificateTlsChallengeArgs) ToCertificateTlsChallengePtrOutputWithContext(ctx context.Context) CertificateTlsChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTlsChallengeOutput).ToCertificateTlsChallengePtrOutputWithContext(ctx)
}

// CertificateTlsChallengePtrInput is an input type that accepts CertificateTlsChallengeArgs, CertificateTlsChallengePtr and CertificateTlsChallengePtrOutput values.
// You can construct a concrete instance of `CertificateTlsChallengePtrInput` via:
//
//          CertificateTlsChallengeArgs{...}
//
//  or:
//
//          nil
type CertificateTlsChallengePtrInput interface {
	pulumi.Input

	ToCertificateTlsChallengePtrOutput() CertificateTlsChallengePtrOutput
	ToCertificateTlsChallengePtrOutputWithContext(context.Context) CertificateTlsChallengePtrOutput
}

type certificateTlsChallengePtrType CertificateTlsChallengeArgs

func CertificateTlsChallengePtr(v *CertificateTlsChallengeArgs) CertificateTlsChallengePtrInput {
	return (*certificateTlsChallengePtrType)(v)
}

func (*certificateTlsChallengePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateTlsChallenge)(nil)).Elem()
}

func (i *certificateTlsChallengePtrType) ToCertificateTlsChallengePtrOutput() CertificateTlsChallengePtrOutput {
	return i.ToCertificateTlsChallengePtrOutputWithContext(context.Background())
}

func (i *certificateTlsChallengePtrType) ToCertificateTlsChallengePtrOutputWithContext(ctx context.Context) CertificateTlsChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTlsChallengePtrOutput)
}

type CertificateTlsChallengeOutput struct{ *pulumi.OutputState }

func (CertificateTlsChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateTlsChallenge)(nil)).Elem()
}

func (o CertificateTlsChallengeOutput) ToCertificateTlsChallengeOutput() CertificateTlsChallengeOutput {
	return o
}

func (o CertificateTlsChallengeOutput) ToCertificateTlsChallengeOutputWithContext(ctx context.Context) CertificateTlsChallengeOutput {
	return o
}

func (o CertificateTlsChallengeOutput) ToCertificateTlsChallengePtrOutput() CertificateTlsChallengePtrOutput {
	return o.ToCertificateTlsChallengePtrOutputWithContext(context.Background())
}

func (o CertificateTlsChallengeOutput) ToCertificateTlsChallengePtrOutputWithContext(ctx context.Context) CertificateTlsChallengePtrOutput {
	return o.ApplyT(func(v CertificateTlsChallenge) *CertificateTlsChallenge {
		return &v
	}).(CertificateTlsChallengePtrOutput)
}
func (o CertificateTlsChallengeOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertificateTlsChallenge) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type CertificateTlsChallengePtrOutput struct{ *pulumi.OutputState }

func (CertificateTlsChallengePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateTlsChallenge)(nil)).Elem()
}

func (o CertificateTlsChallengePtrOutput) ToCertificateTlsChallengePtrOutput() CertificateTlsChallengePtrOutput {
	return o
}

func (o CertificateTlsChallengePtrOutput) ToCertificateTlsChallengePtrOutputWithContext(ctx context.Context) CertificateTlsChallengePtrOutput {
	return o
}

func (o CertificateTlsChallengePtrOutput) Elem() CertificateTlsChallengeOutput {
	return o.ApplyT(func(v *CertificateTlsChallenge) CertificateTlsChallenge { return *v }).(CertificateTlsChallengeOutput)
}

func (o CertificateTlsChallengePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertificateTlsChallenge) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type RegistrationExternalAccountBinding struct {
	HmacBase64 string `pulumi:"hmacBase64"`
	KeyId      string `pulumi:"keyId"`
}

// RegistrationExternalAccountBindingInput is an input type that accepts RegistrationExternalAccountBindingArgs and RegistrationExternalAccountBindingOutput values.
// You can construct a concrete instance of `RegistrationExternalAccountBindingInput` via:
//
//          RegistrationExternalAccountBindingArgs{...}
type RegistrationExternalAccountBindingInput interface {
	pulumi.Input

	ToRegistrationExternalAccountBindingOutput() RegistrationExternalAccountBindingOutput
	ToRegistrationExternalAccountBindingOutputWithContext(context.Context) RegistrationExternalAccountBindingOutput
}

type RegistrationExternalAccountBindingArgs struct {
	HmacBase64 pulumi.StringInput `pulumi:"hmacBase64"`
	KeyId      pulumi.StringInput `pulumi:"keyId"`
}

func (RegistrationExternalAccountBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationExternalAccountBinding)(nil)).Elem()
}

func (i RegistrationExternalAccountBindingArgs) ToRegistrationExternalAccountBindingOutput() RegistrationExternalAccountBindingOutput {
	return i.ToRegistrationExternalAccountBindingOutputWithContext(context.Background())
}

func (i RegistrationExternalAccountBindingArgs) ToRegistrationExternalAccountBindingOutputWithContext(ctx context.Context) RegistrationExternalAccountBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationExternalAccountBindingOutput)
}

func (i RegistrationExternalAccountBindingArgs) ToRegistrationExternalAccountBindingPtrOutput() RegistrationExternalAccountBindingPtrOutput {
	return i.ToRegistrationExternalAccountBindingPtrOutputWithContext(context.Background())
}

func (i RegistrationExternalAccountBindingArgs) ToRegistrationExternalAccountBindingPtrOutputWithContext(ctx context.Context) RegistrationExternalAccountBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationExternalAccountBindingOutput).ToRegistrationExternalAccountBindingPtrOutputWithContext(ctx)
}

// RegistrationExternalAccountBindingPtrInput is an input type that accepts RegistrationExternalAccountBindingArgs, RegistrationExternalAccountBindingPtr and RegistrationExternalAccountBindingPtrOutput values.
// You can construct a concrete instance of `RegistrationExternalAccountBindingPtrInput` via:
//
//          RegistrationExternalAccountBindingArgs{...}
//
//  or:
//
//          nil
type RegistrationExternalAccountBindingPtrInput interface {
	pulumi.Input

	ToRegistrationExternalAccountBindingPtrOutput() RegistrationExternalAccountBindingPtrOutput
	ToRegistrationExternalAccountBindingPtrOutputWithContext(context.Context) RegistrationExternalAccountBindingPtrOutput
}

type registrationExternalAccountBindingPtrType RegistrationExternalAccountBindingArgs

func RegistrationExternalAccountBindingPtr(v *RegistrationExternalAccountBindingArgs) RegistrationExternalAccountBindingPtrInput {
	return (*registrationExternalAccountBindingPtrType)(v)
}

func (*registrationExternalAccountBindingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationExternalAccountBinding)(nil)).Elem()
}

func (i *registrationExternalAccountBindingPtrType) ToRegistrationExternalAccountBindingPtrOutput() RegistrationExternalAccountBindingPtrOutput {
	return i.ToRegistrationExternalAccountBindingPtrOutputWithContext(context.Background())
}

func (i *registrationExternalAccountBindingPtrType) ToRegistrationExternalAccountBindingPtrOutputWithContext(ctx context.Context) RegistrationExternalAccountBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistrationExternalAccountBindingPtrOutput)
}

type RegistrationExternalAccountBindingOutput struct{ *pulumi.OutputState }

func (RegistrationExternalAccountBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistrationExternalAccountBinding)(nil)).Elem()
}

func (o RegistrationExternalAccountBindingOutput) ToRegistrationExternalAccountBindingOutput() RegistrationExternalAccountBindingOutput {
	return o
}

func (o RegistrationExternalAccountBindingOutput) ToRegistrationExternalAccountBindingOutputWithContext(ctx context.Context) RegistrationExternalAccountBindingOutput {
	return o
}

func (o RegistrationExternalAccountBindingOutput) ToRegistrationExternalAccountBindingPtrOutput() RegistrationExternalAccountBindingPtrOutput {
	return o.ToRegistrationExternalAccountBindingPtrOutputWithContext(context.Background())
}

func (o RegistrationExternalAccountBindingOutput) ToRegistrationExternalAccountBindingPtrOutputWithContext(ctx context.Context) RegistrationExternalAccountBindingPtrOutput {
	return o.ApplyT(func(v RegistrationExternalAccountBinding) *RegistrationExternalAccountBinding {
		return &v
	}).(RegistrationExternalAccountBindingPtrOutput)
}
func (o RegistrationExternalAccountBindingOutput) HmacBase64() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationExternalAccountBinding) string { return v.HmacBase64 }).(pulumi.StringOutput)
}

func (o RegistrationExternalAccountBindingOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v RegistrationExternalAccountBinding) string { return v.KeyId }).(pulumi.StringOutput)
}

type RegistrationExternalAccountBindingPtrOutput struct{ *pulumi.OutputState }

func (RegistrationExternalAccountBindingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistrationExternalAccountBinding)(nil)).Elem()
}

func (o RegistrationExternalAccountBindingPtrOutput) ToRegistrationExternalAccountBindingPtrOutput() RegistrationExternalAccountBindingPtrOutput {
	return o
}

func (o RegistrationExternalAccountBindingPtrOutput) ToRegistrationExternalAccountBindingPtrOutputWithContext(ctx context.Context) RegistrationExternalAccountBindingPtrOutput {
	return o
}

func (o RegistrationExternalAccountBindingPtrOutput) Elem() RegistrationExternalAccountBindingOutput {
	return o.ApplyT(func(v *RegistrationExternalAccountBinding) RegistrationExternalAccountBinding { return *v }).(RegistrationExternalAccountBindingOutput)
}

func (o RegistrationExternalAccountBindingPtrOutput) HmacBase64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationExternalAccountBinding) *string {
		if v == nil {
			return nil
		}
		return &v.HmacBase64
	}).(pulumi.StringPtrOutput)
}

func (o RegistrationExternalAccountBindingPtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistrationExternalAccountBinding) *string {
		if v == nil {
			return nil
		}
		return &v.KeyId
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificateDnsChallengeOutput{})
	pulumi.RegisterOutputType(CertificateDnsChallengeArrayOutput{})
	pulumi.RegisterOutputType(CertificateHttpChallengeOutput{})
	pulumi.RegisterOutputType(CertificateHttpChallengePtrOutput{})
	pulumi.RegisterOutputType(CertificateHttpMemcachedChallengeOutput{})
	pulumi.RegisterOutputType(CertificateHttpMemcachedChallengePtrOutput{})
	pulumi.RegisterOutputType(CertificateHttpWebrootChallengeOutput{})
	pulumi.RegisterOutputType(CertificateHttpWebrootChallengePtrOutput{})
	pulumi.RegisterOutputType(CertificateTlsChallengeOutput{})
	pulumi.RegisterOutputType(CertificateTlsChallengePtrOutput{})
	pulumi.RegisterOutputType(RegistrationExternalAccountBindingOutput{})
	pulumi.RegisterOutputType(RegistrationExternalAccountBindingPtrOutput{})
}

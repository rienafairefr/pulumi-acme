// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package acme

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Certificate struct {
	pulumi.CustomResourceState

	AccountKeyPem              pulumi.StringOutput                        `pulumi:"accountKeyPem"`
	CertificateDomain          pulumi.StringOutput                        `pulumi:"certificateDomain"`
	CertificateP12             pulumi.StringOutput                        `pulumi:"certificateP12"`
	CertificateP12Password     pulumi.StringPtrOutput                     `pulumi:"certificateP12Password"`
	CertificatePem             pulumi.StringOutput                        `pulumi:"certificatePem"`
	CertificateRequestPem      pulumi.StringPtrOutput                     `pulumi:"certificateRequestPem"`
	CertificateUrl             pulumi.StringOutput                        `pulumi:"certificateUrl"`
	CommonName                 pulumi.StringPtrOutput                     `pulumi:"commonName"`
	DisableCompletePropagation pulumi.BoolPtrOutput                       `pulumi:"disableCompletePropagation"`
	DnsChallenges              CertificateDnsChallengeArrayOutput         `pulumi:"dnsChallenges"`
	HttpChallenge              CertificateHttpChallengePtrOutput          `pulumi:"httpChallenge"`
	HttpMemcachedChallenge     CertificateHttpMemcachedChallengePtrOutput `pulumi:"httpMemcachedChallenge"`
	HttpWebrootChallenge       CertificateHttpWebrootChallengePtrOutput   `pulumi:"httpWebrootChallenge"`
	IssuerPem                  pulumi.StringOutput                        `pulumi:"issuerPem"`
	KeyType                    pulumi.StringPtrOutput                     `pulumi:"keyType"`
	MinDaysRemaining           pulumi.IntPtrOutput                        `pulumi:"minDaysRemaining"`
	MustStaple                 pulumi.BoolPtrOutput                       `pulumi:"mustStaple"`
	PreCheckDelay              pulumi.IntPtrOutput                        `pulumi:"preCheckDelay"`
	PreferredChain             pulumi.StringPtrOutput                     `pulumi:"preferredChain"`
	PrivateKeyPem              pulumi.StringOutput                        `pulumi:"privateKeyPem"`
	RecursiveNameservers       pulumi.StringArrayOutput                   `pulumi:"recursiveNameservers"`
	SubjectAlternativeNames    pulumi.StringArrayOutput                   `pulumi:"subjectAlternativeNames"`
	TlsChallenge               CertificateTlsChallengePtrOutput           `pulumi:"tlsChallenge"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountKeyPem == nil {
		return nil, errors.New("invalid value for required argument 'AccountKeyPem'")
	}
	var resource Certificate
	err := ctx.RegisterResource("acme:index/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("acme:index/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	AccountKeyPem              *string                            `pulumi:"accountKeyPem"`
	CertificateDomain          *string                            `pulumi:"certificateDomain"`
	CertificateP12             *string                            `pulumi:"certificateP12"`
	CertificateP12Password     *string                            `pulumi:"certificateP12Password"`
	CertificatePem             *string                            `pulumi:"certificatePem"`
	CertificateRequestPem      *string                            `pulumi:"certificateRequestPem"`
	CertificateUrl             *string                            `pulumi:"certificateUrl"`
	CommonName                 *string                            `pulumi:"commonName"`
	DisableCompletePropagation *bool                              `pulumi:"disableCompletePropagation"`
	DnsChallenges              []CertificateDnsChallenge          `pulumi:"dnsChallenges"`
	HttpChallenge              *CertificateHttpChallenge          `pulumi:"httpChallenge"`
	HttpMemcachedChallenge     *CertificateHttpMemcachedChallenge `pulumi:"httpMemcachedChallenge"`
	HttpWebrootChallenge       *CertificateHttpWebrootChallenge   `pulumi:"httpWebrootChallenge"`
	IssuerPem                  *string                            `pulumi:"issuerPem"`
	KeyType                    *string                            `pulumi:"keyType"`
	MinDaysRemaining           *int                               `pulumi:"minDaysRemaining"`
	MustStaple                 *bool                              `pulumi:"mustStaple"`
	PreCheckDelay              *int                               `pulumi:"preCheckDelay"`
	PreferredChain             *string                            `pulumi:"preferredChain"`
	PrivateKeyPem              *string                            `pulumi:"privateKeyPem"`
	RecursiveNameservers       []string                           `pulumi:"recursiveNameservers"`
	SubjectAlternativeNames    []string                           `pulumi:"subjectAlternativeNames"`
	TlsChallenge               *CertificateTlsChallenge           `pulumi:"tlsChallenge"`
}

type CertificateState struct {
	AccountKeyPem              pulumi.StringPtrInput
	CertificateDomain          pulumi.StringPtrInput
	CertificateP12             pulumi.StringPtrInput
	CertificateP12Password     pulumi.StringPtrInput
	CertificatePem             pulumi.StringPtrInput
	CertificateRequestPem      pulumi.StringPtrInput
	CertificateUrl             pulumi.StringPtrInput
	CommonName                 pulumi.StringPtrInput
	DisableCompletePropagation pulumi.BoolPtrInput
	DnsChallenges              CertificateDnsChallengeArrayInput
	HttpChallenge              CertificateHttpChallengePtrInput
	HttpMemcachedChallenge     CertificateHttpMemcachedChallengePtrInput
	HttpWebrootChallenge       CertificateHttpWebrootChallengePtrInput
	IssuerPem                  pulumi.StringPtrInput
	KeyType                    pulumi.StringPtrInput
	MinDaysRemaining           pulumi.IntPtrInput
	MustStaple                 pulumi.BoolPtrInput
	PreCheckDelay              pulumi.IntPtrInput
	PreferredChain             pulumi.StringPtrInput
	PrivateKeyPem              pulumi.StringPtrInput
	RecursiveNameservers       pulumi.StringArrayInput
	SubjectAlternativeNames    pulumi.StringArrayInput
	TlsChallenge               CertificateTlsChallengePtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	AccountKeyPem              string                             `pulumi:"accountKeyPem"`
	CertificateP12Password     *string                            `pulumi:"certificateP12Password"`
	CertificateRequestPem      *string                            `pulumi:"certificateRequestPem"`
	CommonName                 *string                            `pulumi:"commonName"`
	DisableCompletePropagation *bool                              `pulumi:"disableCompletePropagation"`
	DnsChallenges              []CertificateDnsChallenge          `pulumi:"dnsChallenges"`
	HttpChallenge              *CertificateHttpChallenge          `pulumi:"httpChallenge"`
	HttpMemcachedChallenge     *CertificateHttpMemcachedChallenge `pulumi:"httpMemcachedChallenge"`
	HttpWebrootChallenge       *CertificateHttpWebrootChallenge   `pulumi:"httpWebrootChallenge"`
	KeyType                    *string                            `pulumi:"keyType"`
	MinDaysRemaining           *int                               `pulumi:"minDaysRemaining"`
	MustStaple                 *bool                              `pulumi:"mustStaple"`
	PreCheckDelay              *int                               `pulumi:"preCheckDelay"`
	PreferredChain             *string                            `pulumi:"preferredChain"`
	RecursiveNameservers       []string                           `pulumi:"recursiveNameservers"`
	SubjectAlternativeNames    []string                           `pulumi:"subjectAlternativeNames"`
	TlsChallenge               *CertificateTlsChallenge           `pulumi:"tlsChallenge"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	AccountKeyPem              pulumi.StringInput
	CertificateP12Password     pulumi.StringPtrInput
	CertificateRequestPem      pulumi.StringPtrInput
	CommonName                 pulumi.StringPtrInput
	DisableCompletePropagation pulumi.BoolPtrInput
	DnsChallenges              CertificateDnsChallengeArrayInput
	HttpChallenge              CertificateHttpChallengePtrInput
	HttpMemcachedChallenge     CertificateHttpMemcachedChallengePtrInput
	HttpWebrootChallenge       CertificateHttpWebrootChallengePtrInput
	KeyType                    pulumi.StringPtrInput
	MinDaysRemaining           pulumi.IntPtrInput
	MustStaple                 pulumi.BoolPtrInput
	PreCheckDelay              pulumi.IntPtrInput
	PreferredChain             pulumi.StringPtrInput
	RecursiveNameservers       pulumi.StringArrayInput
	SubjectAlternativeNames    pulumi.StringArrayInput
	TlsChallenge               CertificateTlsChallengePtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil))
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

func (i *Certificate) ToCertificatePtrOutput() CertificatePtrOutput {
	return i.ToCertificatePtrOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePtrOutput)
}

type CertificatePtrInput interface {
	pulumi.Input

	ToCertificatePtrOutput() CertificatePtrOutput
	ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput
}

type certificatePtrType CertificateArgs

func (*certificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil))
}

func (i *certificatePtrType) ToCertificatePtrOutput() CertificatePtrOutput {
	return i.ToCertificatePtrOutputWithContext(context.Background())
}

func (i *certificatePtrType) ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatePtrOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//          CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Certificate)(nil))
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

// CertificateMapInput is an input type that accepts CertificateMap and CertificateMapOutput values.
// You can construct a concrete instance of `CertificateMapInput` via:
//
//          CertificateMap{ "key": CertificateArgs{...} }
type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(context.Context) CertificateMapOutput
}

type CertificateMap map[string]CertificateInput

func (CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Certificate)(nil))
}

func (i CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateOutput struct {
	*pulumi.OutputState
}

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Certificate)(nil))
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificatePtrOutput() CertificatePtrOutput {
	return o.ToCertificatePtrOutputWithContext(context.Background())
}

func (o CertificateOutput) ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput {
	return o.ApplyT(func(v Certificate) *Certificate {
		return &v
	}).(CertificatePtrOutput)
}

type CertificatePtrOutput struct {
	*pulumi.OutputState
}

func (CertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil))
}

func (o CertificatePtrOutput) ToCertificatePtrOutput() CertificatePtrOutput {
	return o
}

func (o CertificatePtrOutput) ToCertificatePtrOutputWithContext(ctx context.Context) CertificatePtrOutput {
	return o
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Certificate)(nil))
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Certificate {
		return vs[0].([]Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Certificate)(nil))
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) MapIndex(k pulumi.StringInput) CertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Certificate {
		return vs[0].(map[string]Certificate)[vs[1].(string)]
	}).(CertificateOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificatePtrOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}

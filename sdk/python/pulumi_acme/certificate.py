# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['CertificateArgs', 'Certificate']

@pulumi.input_type
class CertificateArgs:
    def __init__(__self__, *,
                 account_key_pem: pulumi.Input[str],
                 certificate_p12_password: Optional[pulumi.Input[str]] = None,
                 certificate_request_pem: Optional[pulumi.Input[str]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 disable_complete_propagation: Optional[pulumi.Input[bool]] = None,
                 dns_challenges: Optional[pulumi.Input[Sequence[pulumi.Input['CertificateDnsChallengeArgs']]]] = None,
                 http_challenge: Optional[pulumi.Input['CertificateHttpChallengeArgs']] = None,
                 http_memcached_challenge: Optional[pulumi.Input['CertificateHttpMemcachedChallengeArgs']] = None,
                 http_webroot_challenge: Optional[pulumi.Input['CertificateHttpWebrootChallengeArgs']] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 min_days_remaining: Optional[pulumi.Input[int]] = None,
                 must_staple: Optional[pulumi.Input[bool]] = None,
                 pre_check_delay: Optional[pulumi.Input[int]] = None,
                 preferred_chain: Optional[pulumi.Input[str]] = None,
                 recursive_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_challenge: Optional[pulumi.Input['CertificateTlsChallengeArgs']] = None):
        """
        The set of arguments for constructing a Certificate resource.
        """
        pulumi.set(__self__, "account_key_pem", account_key_pem)
        if certificate_p12_password is not None:
            pulumi.set(__self__, "certificate_p12_password", certificate_p12_password)
        if certificate_request_pem is not None:
            pulumi.set(__self__, "certificate_request_pem", certificate_request_pem)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if disable_complete_propagation is not None:
            pulumi.set(__self__, "disable_complete_propagation", disable_complete_propagation)
        if dns_challenges is not None:
            pulumi.set(__self__, "dns_challenges", dns_challenges)
        if http_challenge is not None:
            pulumi.set(__self__, "http_challenge", http_challenge)
        if http_memcached_challenge is not None:
            pulumi.set(__self__, "http_memcached_challenge", http_memcached_challenge)
        if http_webroot_challenge is not None:
            pulumi.set(__self__, "http_webroot_challenge", http_webroot_challenge)
        if key_type is not None:
            pulumi.set(__self__, "key_type", key_type)
        if min_days_remaining is not None:
            pulumi.set(__self__, "min_days_remaining", min_days_remaining)
        if must_staple is not None:
            pulumi.set(__self__, "must_staple", must_staple)
        if pre_check_delay is not None:
            pulumi.set(__self__, "pre_check_delay", pre_check_delay)
        if preferred_chain is not None:
            pulumi.set(__self__, "preferred_chain", preferred_chain)
        if recursive_nameservers is not None:
            pulumi.set(__self__, "recursive_nameservers", recursive_nameservers)
        if subject_alternative_names is not None:
            pulumi.set(__self__, "subject_alternative_names", subject_alternative_names)
        if tls_challenge is not None:
            pulumi.set(__self__, "tls_challenge", tls_challenge)

    @property
    @pulumi.getter(name="accountKeyPem")
    def account_key_pem(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_key_pem")

    @account_key_pem.setter
    def account_key_pem(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_key_pem", value)

    @property
    @pulumi.getter(name="certificateP12Password")
    def certificate_p12_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_p12_password")

    @certificate_p12_password.setter
    def certificate_p12_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_p12_password", value)

    @property
    @pulumi.getter(name="certificateRequestPem")
    def certificate_request_pem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "certificate_request_pem")

    @certificate_request_pem.setter
    def certificate_request_pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_request_pem", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="disableCompletePropagation")
    def disable_complete_propagation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_complete_propagation")

    @disable_complete_propagation.setter
    def disable_complete_propagation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_complete_propagation", value)

    @property
    @pulumi.getter(name="dnsChallenges")
    def dns_challenges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CertificateDnsChallengeArgs']]]]:
        return pulumi.get(self, "dns_challenges")

    @dns_challenges.setter
    def dns_challenges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CertificateDnsChallengeArgs']]]]):
        pulumi.set(self, "dns_challenges", value)

    @property
    @pulumi.getter(name="httpChallenge")
    def http_challenge(self) -> Optional[pulumi.Input['CertificateHttpChallengeArgs']]:
        return pulumi.get(self, "http_challenge")

    @http_challenge.setter
    def http_challenge(self, value: Optional[pulumi.Input['CertificateHttpChallengeArgs']]):
        pulumi.set(self, "http_challenge", value)

    @property
    @pulumi.getter(name="httpMemcachedChallenge")
    def http_memcached_challenge(self) -> Optional[pulumi.Input['CertificateHttpMemcachedChallengeArgs']]:
        return pulumi.get(self, "http_memcached_challenge")

    @http_memcached_challenge.setter
    def http_memcached_challenge(self, value: Optional[pulumi.Input['CertificateHttpMemcachedChallengeArgs']]):
        pulumi.set(self, "http_memcached_challenge", value)

    @property
    @pulumi.getter(name="httpWebrootChallenge")
    def http_webroot_challenge(self) -> Optional[pulumi.Input['CertificateHttpWebrootChallengeArgs']]:
        return pulumi.get(self, "http_webroot_challenge")

    @http_webroot_challenge.setter
    def http_webroot_challenge(self, value: Optional[pulumi.Input['CertificateHttpWebrootChallengeArgs']]):
        pulumi.set(self, "http_webroot_challenge", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_type", value)

    @property
    @pulumi.getter(name="minDaysRemaining")
    def min_days_remaining(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_days_remaining")

    @min_days_remaining.setter
    def min_days_remaining(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_days_remaining", value)

    @property
    @pulumi.getter(name="mustStaple")
    def must_staple(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "must_staple")

    @must_staple.setter
    def must_staple(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "must_staple", value)

    @property
    @pulumi.getter(name="preCheckDelay")
    def pre_check_delay(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pre_check_delay")

    @pre_check_delay.setter
    def pre_check_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pre_check_delay", value)

    @property
    @pulumi.getter(name="preferredChain")
    def preferred_chain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_chain")

    @preferred_chain.setter
    def preferred_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_chain", value)

    @property
    @pulumi.getter(name="recursiveNameservers")
    def recursive_nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "recursive_nameservers")

    @recursive_nameservers.setter
    def recursive_nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recursive_nameservers", value)

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subject_alternative_names")

    @subject_alternative_names.setter
    def subject_alternative_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subject_alternative_names", value)

    @property
    @pulumi.getter(name="tlsChallenge")
    def tls_challenge(self) -> Optional[pulumi.Input['CertificateTlsChallengeArgs']]:
        return pulumi.get(self, "tls_challenge")

    @tls_challenge.setter
    def tls_challenge(self, value: Optional[pulumi.Input['CertificateTlsChallengeArgs']]):
        pulumi.set(self, "tls_challenge", value)


class Certificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_key_pem: Optional[pulumi.Input[str]] = None,
                 certificate_p12_password: Optional[pulumi.Input[str]] = None,
                 certificate_request_pem: Optional[pulumi.Input[str]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 disable_complete_propagation: Optional[pulumi.Input[bool]] = None,
                 dns_challenges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CertificateDnsChallengeArgs']]]]] = None,
                 http_challenge: Optional[pulumi.Input[pulumi.InputType['CertificateHttpChallengeArgs']]] = None,
                 http_memcached_challenge: Optional[pulumi.Input[pulumi.InputType['CertificateHttpMemcachedChallengeArgs']]] = None,
                 http_webroot_challenge: Optional[pulumi.Input[pulumi.InputType['CertificateHttpWebrootChallengeArgs']]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 min_days_remaining: Optional[pulumi.Input[int]] = None,
                 must_staple: Optional[pulumi.Input[bool]] = None,
                 pre_check_delay: Optional[pulumi.Input[int]] = None,
                 preferred_chain: Optional[pulumi.Input[str]] = None,
                 recursive_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_challenge: Optional[pulumi.Input[pulumi.InputType['CertificateTlsChallengeArgs']]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a Certificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Certificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_key_pem: Optional[pulumi.Input[str]] = None,
                 certificate_p12_password: Optional[pulumi.Input[str]] = None,
                 certificate_request_pem: Optional[pulumi.Input[str]] = None,
                 common_name: Optional[pulumi.Input[str]] = None,
                 disable_complete_propagation: Optional[pulumi.Input[bool]] = None,
                 dns_challenges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CertificateDnsChallengeArgs']]]]] = None,
                 http_challenge: Optional[pulumi.Input[pulumi.InputType['CertificateHttpChallengeArgs']]] = None,
                 http_memcached_challenge: Optional[pulumi.Input[pulumi.InputType['CertificateHttpMemcachedChallengeArgs']]] = None,
                 http_webroot_challenge: Optional[pulumi.Input[pulumi.InputType['CertificateHttpWebrootChallengeArgs']]] = None,
                 key_type: Optional[pulumi.Input[str]] = None,
                 min_days_remaining: Optional[pulumi.Input[int]] = None,
                 must_staple: Optional[pulumi.Input[bool]] = None,
                 pre_check_delay: Optional[pulumi.Input[int]] = None,
                 preferred_chain: Optional[pulumi.Input[str]] = None,
                 recursive_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_challenge: Optional[pulumi.Input[pulumi.InputType['CertificateTlsChallengeArgs']]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if account_key_pem is None and not opts.urn:
                raise TypeError("Missing required property 'account_key_pem'")
            __props__['account_key_pem'] = account_key_pem
            __props__['certificate_p12_password'] = certificate_p12_password
            __props__['certificate_request_pem'] = certificate_request_pem
            __props__['common_name'] = common_name
            __props__['disable_complete_propagation'] = disable_complete_propagation
            __props__['dns_challenges'] = dns_challenges
            __props__['http_challenge'] = http_challenge
            __props__['http_memcached_challenge'] = http_memcached_challenge
            __props__['http_webroot_challenge'] = http_webroot_challenge
            __props__['key_type'] = key_type
            __props__['min_days_remaining'] = min_days_remaining
            __props__['must_staple'] = must_staple
            __props__['pre_check_delay'] = pre_check_delay
            __props__['preferred_chain'] = preferred_chain
            __props__['recursive_nameservers'] = recursive_nameservers
            __props__['subject_alternative_names'] = subject_alternative_names
            __props__['tls_challenge'] = tls_challenge
            __props__['certificate_domain'] = None
            __props__['certificate_p12'] = None
            __props__['certificate_pem'] = None
            __props__['certificate_url'] = None
            __props__['issuer_pem'] = None
            __props__['private_key_pem'] = None
        super(Certificate, __self__).__init__(
            'acme:index/certificate:Certificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_key_pem: Optional[pulumi.Input[str]] = None,
            certificate_domain: Optional[pulumi.Input[str]] = None,
            certificate_p12: Optional[pulumi.Input[str]] = None,
            certificate_p12_password: Optional[pulumi.Input[str]] = None,
            certificate_pem: Optional[pulumi.Input[str]] = None,
            certificate_request_pem: Optional[pulumi.Input[str]] = None,
            certificate_url: Optional[pulumi.Input[str]] = None,
            common_name: Optional[pulumi.Input[str]] = None,
            disable_complete_propagation: Optional[pulumi.Input[bool]] = None,
            dns_challenges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CertificateDnsChallengeArgs']]]]] = None,
            http_challenge: Optional[pulumi.Input[pulumi.InputType['CertificateHttpChallengeArgs']]] = None,
            http_memcached_challenge: Optional[pulumi.Input[pulumi.InputType['CertificateHttpMemcachedChallengeArgs']]] = None,
            http_webroot_challenge: Optional[pulumi.Input[pulumi.InputType['CertificateHttpWebrootChallengeArgs']]] = None,
            issuer_pem: Optional[pulumi.Input[str]] = None,
            key_type: Optional[pulumi.Input[str]] = None,
            min_days_remaining: Optional[pulumi.Input[int]] = None,
            must_staple: Optional[pulumi.Input[bool]] = None,
            pre_check_delay: Optional[pulumi.Input[int]] = None,
            preferred_chain: Optional[pulumi.Input[str]] = None,
            private_key_pem: Optional[pulumi.Input[str]] = None,
            recursive_nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            subject_alternative_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tls_challenge: Optional[pulumi.Input[pulumi.InputType['CertificateTlsChallengeArgs']]] = None) -> 'Certificate':
        """
        Get an existing Certificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["account_key_pem"] = account_key_pem
        __props__["certificate_domain"] = certificate_domain
        __props__["certificate_p12"] = certificate_p12
        __props__["certificate_p12_password"] = certificate_p12_password
        __props__["certificate_pem"] = certificate_pem
        __props__["certificate_request_pem"] = certificate_request_pem
        __props__["certificate_url"] = certificate_url
        __props__["common_name"] = common_name
        __props__["disable_complete_propagation"] = disable_complete_propagation
        __props__["dns_challenges"] = dns_challenges
        __props__["http_challenge"] = http_challenge
        __props__["http_memcached_challenge"] = http_memcached_challenge
        __props__["http_webroot_challenge"] = http_webroot_challenge
        __props__["issuer_pem"] = issuer_pem
        __props__["key_type"] = key_type
        __props__["min_days_remaining"] = min_days_remaining
        __props__["must_staple"] = must_staple
        __props__["pre_check_delay"] = pre_check_delay
        __props__["preferred_chain"] = preferred_chain
        __props__["private_key_pem"] = private_key_pem
        __props__["recursive_nameservers"] = recursive_nameservers
        __props__["subject_alternative_names"] = subject_alternative_names
        __props__["tls_challenge"] = tls_challenge
        return Certificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountKeyPem")
    def account_key_pem(self) -> pulumi.Output[str]:
        return pulumi.get(self, "account_key_pem")

    @property
    @pulumi.getter(name="certificateDomain")
    def certificate_domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "certificate_domain")

    @property
    @pulumi.getter(name="certificateP12")
    def certificate_p12(self) -> pulumi.Output[str]:
        return pulumi.get(self, "certificate_p12")

    @property
    @pulumi.getter(name="certificateP12Password")
    def certificate_p12_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "certificate_p12_password")

    @property
    @pulumi.getter(name="certificatePem")
    def certificate_pem(self) -> pulumi.Output[str]:
        return pulumi.get(self, "certificate_pem")

    @property
    @pulumi.getter(name="certificateRequestPem")
    def certificate_request_pem(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "certificate_request_pem")

    @property
    @pulumi.getter(name="certificateUrl")
    def certificate_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "certificate_url")

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "common_name")

    @property
    @pulumi.getter(name="disableCompletePropagation")
    def disable_complete_propagation(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "disable_complete_propagation")

    @property
    @pulumi.getter(name="dnsChallenges")
    def dns_challenges(self) -> pulumi.Output[Optional[Sequence['outputs.CertificateDnsChallenge']]]:
        return pulumi.get(self, "dns_challenges")

    @property
    @pulumi.getter(name="httpChallenge")
    def http_challenge(self) -> pulumi.Output[Optional['outputs.CertificateHttpChallenge']]:
        return pulumi.get(self, "http_challenge")

    @property
    @pulumi.getter(name="httpMemcachedChallenge")
    def http_memcached_challenge(self) -> pulumi.Output[Optional['outputs.CertificateHttpMemcachedChallenge']]:
        return pulumi.get(self, "http_memcached_challenge")

    @property
    @pulumi.getter(name="httpWebrootChallenge")
    def http_webroot_challenge(self) -> pulumi.Output[Optional['outputs.CertificateHttpWebrootChallenge']]:
        return pulumi.get(self, "http_webroot_challenge")

    @property
    @pulumi.getter(name="issuerPem")
    def issuer_pem(self) -> pulumi.Output[str]:
        return pulumi.get(self, "issuer_pem")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "key_type")

    @property
    @pulumi.getter(name="minDaysRemaining")
    def min_days_remaining(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "min_days_remaining")

    @property
    @pulumi.getter(name="mustStaple")
    def must_staple(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "must_staple")

    @property
    @pulumi.getter(name="preCheckDelay")
    def pre_check_delay(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "pre_check_delay")

    @property
    @pulumi.getter(name="preferredChain")
    def preferred_chain(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "preferred_chain")

    @property
    @pulumi.getter(name="privateKeyPem")
    def private_key_pem(self) -> pulumi.Output[str]:
        return pulumi.get(self, "private_key_pem")

    @property
    @pulumi.getter(name="recursiveNameservers")
    def recursive_nameservers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "recursive_nameservers")

    @property
    @pulumi.getter(name="subjectAlternativeNames")
    def subject_alternative_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "subject_alternative_names")

    @property
    @pulumi.getter(name="tlsChallenge")
    def tls_challenge(self) -> pulumi.Output[Optional['outputs.CertificateTlsChallenge']]:
        return pulumi.get(self, "tls_challenge")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

